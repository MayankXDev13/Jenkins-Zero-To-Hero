pipeline {
  agent {
    docker {
      image 'maven:3.9.6-eclipse-temurin-17'
      args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  
  environment {
    SONAR_URL = "http://3.238.116.44:9000"
    DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "iam-veeramalla"
  }
  
  stages {
    stage('Checkout') {
      steps {
        echo 'üì• Checking out code'
        checkout scm
      }
    }
    
    stage('Install Docker') {
      steps {
        echo 'üê≥ Installing Docker in container'
        sh '''
          apt-get update
          apt-get install -y docker.io curl
          docker --version
          
          # Show disk usage after Docker installation
          echo "=== Disk Usage ==="
          df -h
          
          # Clean up Docker resources if any exist
          docker system prune -f || true
          docker image prune -f || true
        '''
      }
    }
    
    stage('Pre-Build Cleanup') {
      steps {
        echo 'üßπ Aggressive cleanup to free disk space'
        sh '''
          # Show current disk usage
          echo "=== Current Disk Usage ==="
          df -h
          
          # More aggressive Docker cleanup
          docker system prune -a -f --volumes || true
          docker container prune -f || true
          docker image prune -a -f || true
          docker volume prune -f || true
          docker network prune -f || true
          
          # Remove all stopped containers
          docker rm $(docker ps -a -q) || true
          
          # Remove all dangling images
          docker rmi $(docker images -f "dangling=true" -q) || true
          
          # Clean package cache
          apt-get clean
          rm -rf /var/lib/apt/lists/*
          
          # Clean temporary files
          rm -rf /tmp/*
          rm -rf /var/tmp/*
          
          # Show disk usage after cleanup
          echo "=== Disk Usage After Cleanup ==="
          df -h
          
          # Show Docker disk usage
          echo "=== Docker Disk Usage ==="
          docker system df || true
        '''
      }
    }
    
    stage('Build and Test') {
      steps {
        echo 'üõ†Ô∏è Building and testing the application'
        sh '''
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean compile test package -e
        '''
      }
      post {
        always {
          // Archive test results
          junit testResults: 'java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/surefire-reports/*.xml', allowEmptyResults: true
        }
      }
    }
    
    stage('Static Code Analysis') {
      steps {
        echo 'üîç Running SonarQube Analysis'
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=$SONAR_URL \
              -Dsonar.projectKey=ultimate-cicd \
              -Dsonar.projectName=ultimate-cicd
          '''
        }
      }
    }
    
    stage('Build and Push Docker Image') {
      steps {
        echo 'üê≥ Building and pushing Docker image'
        sh '''
          # Check available space before build
          echo "=== Pre-Build Disk Check ==="
          df -h
          
          # Use a smaller base image if possible
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          
          # Build with no-cache to avoid layer caching issues
          docker build --no-cache -t ${DOCKER_IMAGE} .
          
          # Show disk usage after build
          echo "=== Post-Build Disk Usage ==="
          df -h
        '''
        
        script {
          try {
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
              def dockerImage = docker.image("${DOCKER_IMAGE}")
              dockerImage.push()
              dockerImage.push('latest')
            }
            echo "‚úÖ Docker image pushed successfully: ${DOCKER_IMAGE}"
            
            // Clean up local image after push
            sh "docker rmi ${DOCKER_IMAGE} || true"
            
          } catch (Exception e) {
            currentBuild.result = 'FAILURE'
            error "‚ùå Docker build/push failed: ${e.getMessage()}"
          }
        }
      }
    }
    
    stage('Update Deployment File') {
      steps {
        echo 'üì¶ Updating Kubernetes deployment file'
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            # Configure git
            git config --global user.email "abhishek.xyz@gmail.com"
            git config --global user.name "Abhishek Veeramalla"
            git config --global --add safe.directory $WORKSPACE
            
            # Check if deployment file exists
            DEPLOYMENT_FILE="java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml"
            
            if [ -f "$DEPLOYMENT_FILE" ]; then
              echo "üìÑ Found deployment file: $DEPLOYMENT_FILE"
              
              # Show current content
              echo "Current deployment file content:"
              cat "$DEPLOYMENT_FILE"
              
              # Update image tag
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" "$DEPLOYMENT_FILE"
              
              # Show updated content
              echo "Updated deployment file content:"
              cat "$DEPLOYMENT_FILE"
              
              # Stage changes
              git add "$DEPLOYMENT_FILE"
              
              # Check if there are changes to commit
              if git diff --staged --quiet; then
                echo "‚ÑπÔ∏è No changes to commit"
              else
                # Commit and push changes
                git commit -m "üöÄ Update deployment image to version ${BUILD_NUMBER}"
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                echo "‚úÖ Successfully updated deployment file"
              fi
            else
              echo "‚ùå Deployment file not found: $DEPLOYMENT_FILE"
              exit 1
            fi
          '''
        }
      }
    }
  }
  
  post {
    always {
      echo 'üßπ Cleaning up'
      sh '''
        # Clean up Docker resources
        docker system prune -f || true
        docker image prune -f || true
        
        # Remove any dangling images
        docker rmi $(docker images -f "dangling=true" -q) || true
        
        # Show final disk usage
        df -h
      '''
    }
    success {
      echo '‚úÖ Pipeline completed successfully!'
    }
    failure {
      echo '‚ùå Pipeline failed!'
    }
  }
}
